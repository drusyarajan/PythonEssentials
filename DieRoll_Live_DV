def update (frame_number, rolls, faces, frequencies):
    """Configure bar plot content for each frames"""
    #roll die and calculate frequencies.
    for i in range(rolls):
        frequencies[random.randrange(1,7) - 1] +=1
        
    #reconfigure the plot with updated frequencies
    plt.cla() #clear plot contents of current figure
    axes = sns.barplot(faces, frequencies, palette = 'bright')
    axes.set_title(f"Die Frequencies or {sum(frequencies)} rolls")
    axes.set(xlabel= 'Faces', ylabel ='Frequency')
    axes.set_ylim(top = max(frequencies)*1.10)
    
    #display frequency and percentage above each bar
    for bar, frequency in zim(axes.patches, frequencies):
        text_x = bar.get_x()+bar.get_width()/2.0
        text_y = bar.get_height()
        text = f'{frequency}, \n {frequency/sum(frequencies):.3f}'
        axes.text(text_x, text_y, text, ha = 'center', va = bottom)
        
    #read user command to find number of frames and rolls per frame
    number_of_frames = int(sys.argv[1])
    rolls_per_frame  = int(sys.argv[2])
    
    sns.set_style('whitegrid')
    figure = plt.figure('Rolling a six faced die')
    values = list(range(1,7))
    frequencies = [0]*6
    
    #configure animation 
    die_animation = animation.FuncAnimation(figure, update, repeat = False, frames = number_of_frames, interval = 33, fargs = (roll_per_frame, values, frequencies))
    plt.show()
